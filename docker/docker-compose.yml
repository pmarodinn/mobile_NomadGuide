services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nomadguide_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nomadguide
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    networks:
      - nomadguide_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d nomadguide"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nomadguide_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@nomadguide.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./init/pgadmin:/pgadmin4/config_local
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nomadguide_network

  # Backend API Server (Node.js - will be created later)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: development
    container_name: nomadguide_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://dev:dev123@postgres:5432/nomadguide
      JWT_SECRET: dev_jwt_secret_key_change_in_production
      API_PORT: 3000
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debug port
    volumes:
      - ../backend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nomadguide_network
    command: npm run dev
    profiles:
      - backend  # Only start when backend is ready

  # Redis Cache (Future Implementation)
  redis:
    image: redis:7-alpine
    container_name: nomadguide_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nomadguide_network
    profiles:
      - full  # Only start with --profile full

volumes:
  postgres_data:
    name: nomadguide_postgres_data
  pgadmin_data:
    name: nomadguide_pgadmin_data
  redis_data:
    name: nomadguide_redis_data

networks:
  nomadguide_network:
    name: nomadguide_network
    driver: bridge
